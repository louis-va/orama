---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import Card from '../common/Card.astro';

interface Props {
  slug: string;
  title: string;
  type: string;
  thumbnail: ImageMetadata;
  preview: ImageMetadata;
  position: {x: number, y: number};
  id: string;
}

const { slug, title, type, thumbnail, preview, position, id } = Astro.props;
---

<project-card
  style={{
    left: `calc(${position.x}% - (var(--card-w) * ${position.x}/100))`,
    top: `calc(${position.y}% - (var(--card-w) * ${position.y}/100))`
  }}
  data-position-x={position.x}
  data-position-y={position.y}
>
  <Card padding="small">
    <div class="layout">
      <a href=`/projects/${slug}`>
        <div class="top">
          <div class="title">{title}</div>
          <div class="empty"></div>
        </div>
        <div class="bottom">
          <div class="image">
            <Image src={thumbnail} alt={`Image vignette de notre projet ${title}.`} class="thumbnail"/>
            <Image src={preview} alt={`Aperçu vidéo de notre projet ${title}.`} class="preview"/>
          </div>
          <div class="infos">
            <div class="id">{id}</div>
            <div class="type">{type}</div>
          </div>
        </div>
      </a>
      <div class="draggable">
        <div class="icon">
          <svg width="8" height="10" viewBox="0 0 8 10" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M8 5.00005L0.5 9.33018L0.5 0.669922L8 5.00005Z" fill="currentColor"/>
          </svg>            
        </div>
      </div>
    </div>
  </Card>
</project-card>

<script>
  class ProjectCard extends HTMLElement {
    constructor() {
      super();

      const card = this as HTMLElement;
      const draggable = this.querySelector('.draggable')! as HTMLElement;
      const projectContainer = document.querySelector('#projects')! as HTMLElement;
      const root = document.querySelector('html')! as HTMLElement;

      let position = {x: Number(this.dataset.positionX!), y: Number(this.dataset.positionY!)}

      let isDragging = false;
      let previousDragPosition: null | {x: number, y: number} = null;

      const moveCard = (x: number, y: number) => {
        const containerSize = projectContainer.getBoundingClientRect();
        const cardSize = card.getBoundingClientRect();

        const w = containerSize.width - cardSize.width;
        const h = containerSize.height - cardSize.height;

        const shiftX = 1 + (cardSize.width * (w / w**2))
        const shiftY = 1 + (cardSize.height * (h / h**2))

        position = {
          x: position.x + x * shiftX,
          y: position.y + y * shiftY,
        }

        if(position.x >=0 && position.x <= 100) card.style.left = `calc(${position.x}% - (var(--card-w) * ${position.x}/100))`
        if(position.y >=0 && position.y <= 100) card.style.top = `calc(${position.y}% - (var(--card-w) * ${position.y}/100))`
      }

      draggable.addEventListener('mousedown', () => {
        isDragging = true;
        card.classList.add('card-active');
      });

      root.addEventListener('mouseup', () => {
        isDragging = false;
        card.classList.remove('card-active');
      });

      projectContainer.addEventListener('mousemove', (event) => {
        if (isDragging) {
          const e = event as MouseEvent;

          const rect = projectContainer.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;
          const containerWidth = rect.width;
          const containerHeight = rect.height;

          let dragPosition = {x: (x / containerWidth) * 100, y: (y / containerHeight) * 100}

          if (previousDragPosition !== null) {
            moveCard(dragPosition.x - previousDragPosition.x, dragPosition.y - previousDragPosition.y)
          }

          previousDragPosition = dragPosition;
        }
      });
    }
  }

  customElements.define('project-card', ProjectCard);
</script>

<style>
  project-card {
    position: absolute;
    width: var(--card-w);
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  .layout {
    position: relative;
  }
  .layout:hover .icon {
    color: var(--red);
  }

  .layout .top {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    height: 20px;
  }
  .layout .top .title {
    background-color: var(--black);
    color: var(--white);
    text-transform: uppercase;
    font-size: var(--text-small);
    padding: 0 .3rem;
    width: 100%;
    flex: 1;
  }
  .layout .top .empty {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 20px;
  }

  .layout .bottom {
    display: flex;
  }
  .layout .bottom .infos {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 20px;
    background-color: var(--black);
    color: var(--white);
    text-transform: uppercase;
    font-size: var(--text-small);
    padding: .3rem 0;
  }
  .layout .bottom .infos .id {
    transform: rotate(-90deg);
    text-align: right;
    width: 20px;
  }
  .layout .bottom .infos .type {
    transform: rotate(-90deg);
    width: 20px;
  }
  .layout .bottom .image {
    position: relative;
  }
  .layout .bottom .image .thumbnail {
    aspect-ratio: 1/1;
    height: auto;
    pointer-events: none;
  }
  .layout .bottom .image .preview {
    position: absolute;
    opacity: 0;
    width: 100%;
    top: 0;
    left: 0;
    aspect-ratio: 1/1;
    height: auto;
    transition: opacity ease-in .25s;
    transition-delay: .25s;
    pointer-events: none;
  }

  .layout:hover .bottom .image .preview {
    opacity: 1;
  }

  .layout .draggable {
    position: absolute;
    top: 0;
    right: 0;
  }
  .layout .draggable .icon {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 20px;
    height: 20px;
    z-index: 10;
  }
  .layout .draggable .icon svg {
    width: 40%;
    height: auto;
  }
  .layout .draggable:hover {
    cursor: grab;
  }
  .layout .draggable:active {
    cursor: grabbing;
  }
</style>