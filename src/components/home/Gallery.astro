---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import { gallery } from '../../content/gallery/gallery';

// Get gallery images dynamically
const imageFiles = import.meta.glob<{ default: ImageMetadata }>('/src/content/gallery/*.{jpeg,jpg,png,gif}', { eager: true });
const path = "/src/content/gallery/";
---

<div class="container">
  <div class="gallery" id="gallery-container">
    <div class="container">
      <div class="viewfinder" data-cursor="focus">
        SCAN
        <div class="pointer">
          <div class="top-left"></div>
          <div class="top-right"></div>
          <div class="bottom-left"></div>
          <div class="bottom-right"></div>
        </div>
        <div class="invert"></div>
      </div>

      <div class="slider">
        {gallery.map((image) => {
          const imgPath = path + image.src;
          if (imageFiles[imgPath]) {
            return (
              <div class="img">
                <Image src={imageFiles[imgPath].default} alt={image.description} />
              </div>
            );
          }
        })}

        {gallery.map((image) => {
          const imgPath = path + image.src;
          if (imageFiles[imgPath]) {
            return (
              <div class="img" aria-hidden="true">
                <Image src={imageFiles[imgPath].default} alt="" />
              </div>
            );
          }
        })}
      </div>
    </div>
  </div>

  <div class="squares">
    <div class="square"></div>
    <div class="square"></div>
    <div class="square"></div>
    <div class="square"></div>
    <div class="square mobile-hidden"></div>
    <div class="square mobile-hidden"></div>
    <div class="square mobile-hidden"></div>
    <div class="square mobile-hidden"></div>
  </div>
</div>

<style>
  .gallery {
    margin-top: 7.5rem;
    width: 100%;
    height: 15rem;
    background-color: var(--black);
    --red: #FF0000;
  }
  .gallery .container {
    position: relative;
    height: 100%;
    overflow: hidden;
  }
  .gallery .slider {
    width: max-content;
    white-space: nowrap;
    -moz-animation: slider 60s linear infinite;
    -webkit-animation: slider 60s linear infinite;
    animation: slider 60s linear infinite;
  }
  .gallery .img {
    padding: 0.5rem;
    display: inline-block;
    height: 100%;
    width: auto;
  }
  .gallery .img img {
    height: 14rem;
    border-radius: .125rem;
    width: auto;
    pointer-events: none;
    opacity: 0.95;
    filter: invert(1);
  }

  .viewfinder {
    position: absolute;
    display: block;
    height: 100%;
    aspect-ratio: 4/3;
    top: 50%;
    transform: translate(-50%, -50%);
    border: 1px solid var(--red);
    z-index: 10;
    padding: 0.5rem;
    font-size: var(--text-small);
    text-transform: uppercase;
    color: var(--red);
    line-height: 100%;
  }
  .viewfinder .pointer {
    position: absolute;
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    left: calc(50% - 0.5rem);
    top: calc(50% - 0.5rem);
    width: 1rem;
    height: 1rem;
    pointer-events: none;
    gap: 0.5rem;
  }
  .viewfinder .pointer .top-left {
    border-top: 1px solid var(--red);
    border-left: 1px solid var(--red);
  }
  .viewfinder .pointer .top-right {
    border-top: 1px solid var(--red);
    border-right: 1px solid var(--red);
  }
  .viewfinder .pointer .bottom-left {
    border-bottom: 1px solid var(--red);
    border-left: 1px solid var(--red);
  }
  .viewfinder .pointer .bottom-right {
    border-bottom: 1px solid var(--red);
    border-right: 1px solid var(--red);
  }

  @keyframes slider {
    from { transform: translateX(0%); }
    to   { transform: translateX(-50%); }
  }

  @media screen and (max-width: 768px) {
		.viewfinder {
      aspect-ratio: 1/1;
    }
	}
</style>

<style is:global>
  .touch-device .viewfinder .invert {
		position: absolute;
		top: 0;
		left: 0;
		height: 100%;
		width: 100%;
		backdrop-filter: invert(100%);
		z-index: -1;
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const galleryContainer = document.getElementById('gallery-container') as HTMLElement;
    const viewfinder = galleryContainer.querySelector('.viewfinder') as HTMLElement;

    // initialize at center
    viewfinder.style.left = '50%';

    galleryContainer.addEventListener('mousemove', (e) => {
      const rect = galleryContainer.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const viewSize = rect.height  * (4/3);
      const halfWidth = viewSize / 2;
      const clampedX = Math.min(Math.max(x, halfWidth), rect.width - halfWidth);
      viewfinder.style.left = `${clampedX}px`;
    });
  });
</script>
