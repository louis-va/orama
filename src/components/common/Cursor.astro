<div class="cursor-overlay" transition:persist>
	<div id="cursor" class="cursor">
		<svg
			id="square"
			class="icon"
			style="display: block"
			preserveAspectRatio="none"
			width="10"
			height="10"
			viewBox="0 0 10 10"
			fill="none"
			xmlns="http://www.w3.org/2000/svg">
			<path d="M0 0H10V10H0V0Z" fill="currentColor"></path>
		</svg>
		<svg
			id="eye"
			class="icon"
			style="display: none"
			preserveAspectRatio="none"
			width="10"
			height="10"
			viewBox="0 0 10 10"
			fill="none"
			xmlns="http://www.w3.org/2000/svg">
			<path
				d="M4.99998 4.25C4.58577 4.25 4.24998 4.58578 4.24998 5C4.24998 5.41421 4.58577 5.75 4.99998 5.75C5.4142 5.75 5.74998 5.41421 5.74998 5C5.74998 4.58578 5.4142 4.25 4.99998 4.25Z"
				fill="currentColor"></path>
			<path
				fill-rule="evenodd"
				clip-rule="evenodd"
				d="M6.98915 3.38466C5.94187 2.16849 4.05809 2.16849 3.01084 3.38466L1.61985 5L3.01084 6.61535C4.0581 7.8315 5.94187 7.8315 6.98915 6.61535L8.3801 5L6.98915 3.38466ZM3.49998 5C3.49998 4.17157 4.17155 3.5 4.99998 3.5C5.82841 3.5 6.5 4.17157 6.5 5C6.5 5.82843 5.82841 6.5 4.99998 6.5C4.17155 6.5 3.49998 5.82843 3.49998 5Z"
				fill="currentColor"></path>
			<path
				fill-rule="evenodd"
				clip-rule="evenodd"
				d="M10 0H0V10H10V0ZM2.44252 2.89527C3.78899 1.33162 6.211 1.33162 7.55745 2.89527L9.15915 4.7553V5.24469L7.55745 7.1047C6.211 8.66835 3.78899 8.66835 2.44252 7.1047L0.84082 5.24469V4.7553L2.44252 2.89527Z"
				fill="currentColor"></path>
		</svg>
	</div>
</div>

<script>
	import debounce from "lodash.debounce";

	const CURSOR = document.getElementById("cursor") as HTMLElement;
	const ICONS = CURSOR.getElementsByClassName("icon") as HTMLCollectionOf<HTMLElement>;

	let cursor = {
		size: { w: 8, h: 8 },
		position: { x: 0, y: 0 },
		opacity: 0,
	};
	let mouseRef = { x: 0, y: 0 };

	const updateCursorPosition = (x: number, y: number) => {
		const hoveredElement = document.elementFromPoint(x, y);

		if (hoveredElement && hoveredElement.getAttribute("data-cursor") === "focus") {
			const targetElement = hoveredElement.querySelector('[data-cursor="target"]');
			const target = targetElement ? targetElement : hoveredElement;
			const info = target.getBoundingClientRect();
			setIcon("square");
			cursor = {
				size: { w: info.width, h: info.height },
				position: { x: info.x + info.width / 2 - 5, y: info.y + info.height / 2 - 5 },
				opacity: 1,
			};
		} else if (hoveredElement && hoveredElement.getAttribute("data-cursor") === "icon") {
			setIcon(hoveredElement.getAttribute("data-icon") ?? "square");
			cursor = {
				size: { w: 30, h: 30 },
				position: { x: x - 7, y: y - 7 },
				opacity: 1,
			};
		} else {
			setIcon("square");
			cursor = {
				size: { w: 8, h: 8 },
				position: { x: x - 7, y: y - 7 },
				opacity: 1,
			};
		}

		CURSOR.style.transform = `translate(${cursor.position.x}px, ${cursor.position.y}px) scale(${cursor.size.w / 10}, ${cursor.size.h / 10})`;
		CURSOR.style.opacity = `${cursor.opacity}`;
	};

	const setIcon = (i: string) => {
		for (let icon of ICONS) {
			if (icon.id === i) {
				icon.style.display = "block";
			} else {
				icon.style.display = "none";
			}
		}
	};

	const handleMouseMove = debounce((event: any) => {
		const mouseX = event.clientX;
		const mouseY = event.clientY;
		mouseRef = { x: mouseX, y: mouseY };
		updateCursorPosition(mouseX, mouseY);
	}, 12);

	const handleScroll = debounce(() => {
		const { x, y } = mouseRef;
		updateCursorPosition(x, y);
	}, 12);

	const handleMouseDown = () => {
		CURSOR.classList.add("active");
		setTimeout(() => {
			const { x, y } = mouseRef;
			updateCursorPosition(x, y);
		}, 1);
	};

	const handleMouseUp = () => {
		CURSOR.classList.remove("active");
		const { x, y } = mouseRef;
		setTimeout(() => {
			const { x, y } = mouseRef;
			updateCursorPosition(x, y);
		}, 1);
	};

	// if not on a touch device
	if (!("ontouchstart" in window || navigator.maxTouchPoints > 0)) {
		document.addEventListener("mousemove", handleMouseMove);
		window.addEventListener("scroll", handleScroll);
		document.addEventListener("mousedown", handleMouseDown);
		document.addEventListener("mouseup", handleMouseUp);
	}
</script>

<style>
	.cursor-overlay {
		overflow-x: hidden;
		position: fixed;
		z-index: 999;
		width: 100vw;
		height: 100vh;
		pointer-events: none;
		mix-blend-mode: difference;
	}
	.cursor {
		position: absolute;
		transition:
			transform cubic-bezier(0, 0, 0.2, 1) 150ms,
			opacity ease-in-out 150ms 150ms;
		pointer-events: none;
		background-color: rgba(0, 0, 0, 0);
		color: rgb(0, 0, 0);
		filter: invert(1);
		opacity: 0;
		will-change: transform; /* trigger hardware acceleration */
	}
	.cursor .icon {
		width: 100%;
		height: 100%;
		transform: scale(1);
		will-change: transform;
		transition: transform ease-in-out 150ms;
	}
	.cursor.active .icon {
		transform: scale(1.1);
	}
</style>

<style is:global>
	.touch-device .cursor {
		display: none;
	}
</style>
